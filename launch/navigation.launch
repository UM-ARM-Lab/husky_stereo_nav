<launch>

    <!-- ZED topics -->
    <arg name="left_image" value="/zed2i/zed_node/left/image_rect_color" />
    <arg name="right_image" value="/zed2i/zed_node/right/image_rect_color" />
    <arg name="left_camera_info" value="/zed2i/zed_node/left/camera_info" />
    <arg name="right_camera_info" value="/zed2i/zed_node/right/camera_info" />

    <arg name="zed_frame" default="zed_mount_link" />
    <arg name="base_frame" default="base_footprint2" />
    <arg name="static_map_path" default="$(find husky_stereo_nav)/maps/lab_new2.yaml" />
    <arg name="rviz_config_path" default="$(find husky_stereo_nav)/rviz/navigation.rviz" />
    <arg name="nav_config_path" value="$(find husky_stereo_nav)/config/navigation" />

    <param name="waypoint_sequence_path" value="$(find husky_stereo_nav)/config/waypoints/roof_waypoints.json" />

    <group ns="zed2i">
        <!-- ZED wrapper node -->
        <node name="zed_node" pkg="zed_wrapper" type="zed_wrapper_node" output="screen" required="true">
            <rosparam file="$(find husky_stereo_nav)/config/zed/common.yaml" command="load" />
            <rosparam file="$(find husky_stereo_nav)/config/zed/zed2i.yaml" command="load" />

            <param name="general/base_frame" value="$(arg zed_frame)" />
        </node>

        <!-- static TF publisher for base_footprint -->
        <node pkg="tf" type="static_transform_publisher" name="base_footprint_publisher" 
              args="0 0 0.13228 0 0 0 base_footprint2 base_link 100" />
        
        <!-- static TF publisher for ZED mount -->
        <node pkg="tf" type="static_transform_publisher" name="zed_mount_link_publisher" 
              args="0.00635 0.169545 0.43815 1.570796 0 0 hdt_michigan_root zed_mount_link 100" />

        <!-- load ZED URDF -->
        <param name="zed2i_description" command="$(find xacro)/xacro '$(find zed_wrapper)/urdf/zed_descr.urdf.xacro'
                        camera_name:=zed2i
                        camera_model:=zed2i
                        base_frame:=$(arg zed_frame)" />

        <!-- ZED URDF publisher -->
        <node name="zed2i_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" output="screen" required="true">
            <remap from="robot_description" to="zed2i_description" />
        </node>
    </group>


    <!-- PCL filter for ZED pointcloud -->
    <node name="statistical_outlier_removal" pkg="nodelet" type="nodelet" args="standalone pcl/StatisticalOutlierRemoval">
        <remap from="statistical_outlier_removal/input" to="/zed2i/zed_node/point_cloud/cloud_registered" />
        <remap from="statistical_outlier_removal/output" to="/point_cloud_filtered" />
        <rosparam>
            mean_k: 9
            stddev: 0.05
        </rosparam>
    </node>

    <!-- visual odometry -->
    <node pkg="rtabmap_ros" type="stereo_odometry" name="stereo_odometry" output="screen" launch-prefix="bash -c 'sleep 10; $0 $@'">
        <remap from="left/image_rect" to="$(arg left_image)" />
        <remap from="right/image_rect" to="$(arg right_image)" />
        <remap from="left/camera_info" to="$(arg left_camera_info)" />
        <remap from="right/camera_info" to="$(arg right_camera_info)" />
        <remap from="odom" to="/odometry" />

        <param name="frame_id" type="string" value="$(arg base_frame)" />
        <param name="odom_frame_id" type="string" value="odom" />

        <!-- params controlling how strict odometry is about accepting correspondences,
             trade-off between frequency/robustness and accuracy -->
        <param name="Vis/InlierDistance" type="string" value="0.1" />
        <param name="Vis/MinInliers" type="string" value="20" />

        <param name="GFTT/MinDistance" type="string" value="5" />
        <param name="publish_tf" type="bool" value="true" />

        <!-- restrict pose of robot to 3 degrees of freedom (x, y, theta), i.e a 2D plane -->
        <param name="Reg/Force3DoF" value="true" />
    </node>

    <!-- visual loop closure detection using pre recorded 3D map -->
    <group ns="rtabmap">
        <!-- wait 10 seconds for ZED camera autoexposure before launching -->
        <node name="rtabmap" pkg="rtabmap_ros" type="rtabmap" output="screen"
              args="" launch-prefix="bash -c 'sleep 10; $0 $@'">

            <param name="frame_id" type="string" value="$(arg base_frame)" />

            <!-- subscribe to stereo images as the input source -->
            <param name="subscribe_stereo" type="bool" value="true" />
            <param name="subscribe_depth" type="bool" value="false" />

            <remap from="left/image_rect" to="$(arg left_image)" />
            <remap from="right/image_rect" to="$(arg right_image)" />
            <remap from="left/camera_info" to="$(arg left_camera_info)" />
            <remap from="right/camera_info" to="$(arg right_camera_info)" />
            <remap from="odom" to="/odometry" />

            <param name="queue_size" type="int" value="30" />

            <!-- localization mode -->
            <param name="Mem/IncrementalMemory" type="string" value="false" />

            <!-- start putting nodes in long term memory once graph optimization takes more than this many ms -->
            <param name="Rtabmap/TimeThr" type="string" value="700" />

            <!-- make new nodes at this rate (Hz) -->
            <param name="Rtabmap/DetectionRate" type="string" value="1" />
            <param name="publish_tf" type="bool" value="true" />

            <!-- only use this height range for projecting the 2D grid_map -->
            <param name="Grid/MaxObstacleHeight" type="string" value="1" />
            <param name="Grid/MaxGroundHeight" type="string" value="0.02" />

            <!-- apply filtering min neighbors filtering to 3D map pointcloud before projecting the 2D grid_map -->
            <param name="Grid/NoiseFilteringRadius" type="string" value="0.4" />
            <param name="Grid/NoiseFilteringMinNeighbors" type="string" value="10" />

            <!-- restrict pose of robot to 3 degrees of freedom (x, y, theta), i.e a 2D plane -->
            <param name="Reg/Force3DoF" value="true" />

            <!-- controls how strictly loop closures are accepted, 
                 trade-off between frequency and accuracy of loop closures -->
            <param name="Vis/MinInliers" value="35" />
        </node>
    </group>

    <!-- map server to serve static map -->
    <node name="map_server" pkg="map_server" type="map_server" args="$(arg static_map_path)" />

    <!-- navigation stack -->
    <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
        <rosparam file="$(arg nav_config_path)/costmap_common.yaml" command="load" ns="global_costmap" />
        <rosparam file="$(arg nav_config_path)/costmap_common.yaml" command="load" ns="local_costmap" />
        <rosparam file="$(arg nav_config_path)/costmap_local.yaml" command="load" />
        <rosparam file="$(arg nav_config_path)/costmap_global.yaml" command="load" />
        <rosparam file="$(arg nav_config_path)/trajectory_planner.yaml" command="load" />
        <rosparam file="$(arg nav_config_path)/global_planner.yaml" command="load" />
    </node>

    <!-- trajectory server that records and publishes a path where the robot has driven -->
    <node pkg="hector_trajectory_server" type="hector_trajectory_server" name="hector_trajectory_server" output="screen">
        <param name="target_frame_name" type="string" value="map" />
        <param name="source_frame_name" type="string" value="$(arg base_frame)" />
        <param name="trajectory_update_rate" type="double" value="8" />
        <param name="trajectory_publish_rate" type="double" value="2" />
    </node>

    <!-- node that resets the recorded path every time a new goal is started -->
    <node pkg="husky_stereo_nav" type="reset_path.py" name="reset_path" output="screen"></node>

    <!-- custom RViz config -->
    <node pkg="rviz" type="rviz" name="rviz" args="-d $(arg rviz_config_path)" />

</launch>